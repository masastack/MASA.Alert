// <auto-generated />
using System;
using Masa.Alert.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Masa.Alert.EntityFrameworkCore.PostgreSql.Migrations
{
    [DbContext(typeof(AlertDbContext))]
    [Migration("20241206085425_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Masa.Alert.Domain.AlarmHistories.Aggregates.AlarmHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlarmCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AlarmRuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("AlertSeverity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("FirstAlarmTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastAlarmTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastNotificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Modifier")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RecoveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RuleResultItems")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlarmHistorys", "alert");
                });

            modelBuilder.Entity("Masa.Alert.Domain.AlarmRules.Aggregates.AlarmRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppIdentity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ChartYAxisUnit")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ContinuousTriggerThreshold")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGetTotal")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Modifier")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectIdentity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SchedulerJobId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Show")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasDefaultValue("");

                    b.Property<string>("TotalVariable")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WhereExpression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlarmRules", "alert");
                });

            modelBuilder.Entity("Masa.Alert.Domain.AlarmRules.Aggregates.AlarmRuleRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AlarmHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlarmRuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConsecutiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExcuteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrigger")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Modifier")
                        .HasColumnType("uuid");

                    b.Property<string>("RuleResultItems")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlarmRuleRecords", "alert");
                });

            modelBuilder.Entity("Masa.Alert.Domain.WebHooks.Aggregates.WebHook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Modifier")
                        .HasColumnType("uuid");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WebHooks", "alert");
                });

            modelBuilder.Entity("Masa.BuildingBlocks.Dispatcher.IntegrationEvents.Logs.IntegrationEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpandContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("RowVersion");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId", "RowVersion" }, "IX_EventId_Version");

                    b.HasIndex(new[] { "State", "ModificationTime" }, "IX_State_MTime");

                    b.HasIndex(new[] { "State", "TimesSent", "ModificationTime" }, "IX_State_TimesSent_MTime");

                    b.ToTable("IntegrationEventLog", (string)null);
                });

            modelBuilder.Entity("Masa.Alert.Domain.AlarmHistories.Aggregates.AlarmHistory", b =>
                {
                    b.OwnsOne("Masa.Alert.Domain.AlarmHistories.Aggregates.AlarmHandle", "Handle", b1 =>
                        {
                            b1.Property<Guid>("AlarmHistoryId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Handler")
                                .HasColumnType("uuid")
                                .HasColumnName("Handler");

                            b1.Property<bool>("IsHandleNotice")
                                .HasColumnType("boolean")
                                .HasColumnName("IsHandleNotice");

                            b1.Property<string>("NotificationConfig")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("HandleNotificationConfig");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("HandleStatus");

                            b1.Property<Guid>("WebHookId")
                                .HasColumnType("uuid")
                                .HasColumnName("WebHookId");

                            b1.HasKey("AlarmHistoryId");

                            b1.ToTable("AlarmHistorys", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmHistoryId");
                        });

                    b.OwnsMany("Masa.Alert.Domain.AlarmHistories.Aggregates.AlarmHandleStatusCommit", "HandleStatusCommits", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AlarmHistoryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("CreationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Remarks")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("AlarmHistoryId");

                            b1.ToTable("AlarmHandleStatusCommits", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmHistoryId");
                        });

                    b.Navigation("Handle")
                        .IsRequired();

                    b.Navigation("HandleStatusCommits");
                });

            modelBuilder.Entity("Masa.Alert.Domain.AlarmRules.Aggregates.AlarmRule", b =>
                {
                    b.OwnsMany("Masa.Alert.Domain.AlarmRules.Aggregates.AlarmRuleItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AlarmRuleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AlertSeverity")
                                .HasColumnType("integer");

                            b1.Property<string>("Expression")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("IsNotification")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsRecoveryNotification")
                                .HasColumnType("boolean");

                            b1.Property<string>("NotificationConfig")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("RecoveryNotificationConfig")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("AlarmRuleId");

                            b1.ToTable("AlarmRuleItems", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmRuleId");
                        });

                    b.OwnsOne("Masa.Alert.Domain.AlarmRules.Aggregates.CheckFrequency", "CheckFrequency", b1 =>
                        {
                            b1.Property<Guid>("AlarmRuleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CronExpression")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("CheckFrequencyCron");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("CheckFrequencyType");

                            b1.HasKey("AlarmRuleId");

                            b1.ToTable("AlarmRules", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmRuleId");

                            b1.OwnsOne("Masa.Alert.Domain.AlarmRules.Aggregates.TimeInterval", "FixedInterval", b2 =>
                                {
                                    b2.Property<Guid>("CheckFrequencyAlarmRuleId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("IntervalTime")
                                        .HasColumnType("integer")
                                        .HasColumnName("CheckFrequencyIntervalTime");

                                    b2.Property<int>("IntervalTimeType")
                                        .HasColumnType("integer")
                                        .HasColumnName("CheckFrequencyIntervalTimeType");

                                    b2.HasKey("CheckFrequencyAlarmRuleId");

                                    b2.ToTable("AlarmRules", "alert");

                                    b2.WithOwner()
                                        .HasForeignKey("CheckFrequencyAlarmRuleId");
                                });

                            b1.Navigation("FixedInterval")
                                .IsRequired();
                        });

                    b.OwnsMany("Masa.Alert.Domain.AlarmRules.Aggregates.LogMonitorItem", "LogMonitorItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("AggregationType")
                                .HasColumnType("integer");

                            b1.Property<Guid>("AlarmRuleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Field")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("IsOffset")
                                .HasColumnType("boolean");

                            b1.Property<int>("OffsetPeriod")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("AlarmRuleId");

                            b1.ToTable("AlarmRuleLogMonitors", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmRuleId");
                        });

                    b.OwnsMany("Masa.Alert.Domain.AlarmRules.Aggregates.MetricMonitorItem", "MetricMonitorItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AlarmRuleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Expression")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("IsExpression")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsOffset")
                                .HasColumnType("boolean");

                            b1.Property<int>("OffsetPeriod")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("AlarmRuleId");

                            b1.ToTable("AlarmRuleMetricMonitors", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmRuleId");

                            b1.OwnsOne("Masa.Alert.Domain.AlarmRules.Aggregates.MetricAggregation", "Aggregation", b2 =>
                                {
                                    b2.Property<Guid>("MetricMonitorItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("AggregationType")
                                        .HasColumnType("integer")
                                        .HasColumnName("AggregationType");

                                    b2.Property<int>("ComparisonOperator")
                                        .HasColumnType("integer")
                                        .HasColumnName("ComparisonOperator");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Name");

                                    b2.Property<string>("Tag")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Tag");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Value");

                                    b2.HasKey("MetricMonitorItemId");

                                    b2.ToTable("AlarmRuleMetricMonitors", "alert");

                                    b2.WithOwner()
                                        .HasForeignKey("MetricMonitorItemId");
                                });

                            b1.Navigation("Aggregation")
                                .IsRequired();
                        });

                    b.OwnsOne("Masa.Alert.Domain.AlarmRules.Aggregates.SilenceCycle", "SilenceCycle", b1 =>
                        {
                            b1.Property<Guid>("AlarmRuleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SilenceCycleValue")
                                .HasColumnType("integer")
                                .HasColumnName("SilenceCycleValue");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("SilenceCycleType");

                            b1.HasKey("AlarmRuleId");

                            b1.ToTable("AlarmRules", "alert");

                            b1.WithOwner()
                                .HasForeignKey("AlarmRuleId");

                            b1.OwnsOne("Masa.Alert.Domain.AlarmRules.Aggregates.TimeInterval", "TimeInterval", b2 =>
                                {
                                    b2.Property<Guid>("SilenceCycleAlarmRuleId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("IntervalTime")
                                        .HasColumnType("integer")
                                        .HasColumnName("SilenceCycleIntervalTime");

                                    b2.Property<int>("IntervalTimeType")
                                        .HasColumnType("integer")
                                        .HasColumnName("SilenceCycleIntervalTimeType");

                                    b2.HasKey("SilenceCycleAlarmRuleId");

                                    b2.ToTable("AlarmRules", "alert");

                                    b2.WithOwner()
                                        .HasForeignKey("SilenceCycleAlarmRuleId");
                                });

                            b1.Navigation("TimeInterval")
                                .IsRequired();
                        });

                    b.Navigation("CheckFrequency")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("LogMonitorItems");

                    b.Navigation("MetricMonitorItems");

                    b.Navigation("SilenceCycle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
