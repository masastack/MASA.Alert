@inherits AdminCompontentBase

<div class="d-flex fill fill-card @Class" style="height: 40px;min-width: 240px">
    <SIcon Size=20 Color="emphasis2--text" Class="@($"pl-2 {IconClass}")">mdi-calendar-month</SIcon>
    <MMenu @bind-Value="StartTimeVisible" CloseOnContentClick="false" OffsetY Transition="scale-transition">
        <ActivatorContent>
            <div class="ml-2 text-btn my-auto hover-pointer text-center" style="height:20px;min-width:73px" @attributes="@context.Attrs">
                @(StartTime?.ToString("yyyy-MM-dd") ?? T("StartTime"))
            </div>
        </ActivatorContent>
        <ChildContent>
            <SDatePicker Value=_StartTime Max=_EndTime ValueChanged=UpdateStartTimeAsync TValue="DateOnly?" OnInput="()=> StartTimeVisible = false"></SDatePicker>
        </ChildContent>
    </MMenu>
    <MDivider Vertical Class="ma-2" Style="display:initial"></MDivider>
    <MMenu @bind-Value="EndTimeVisible" CloseOnContentClick="false" OffsetY Transition="scale-transition">
        <ActivatorContent>
            <div class="text-btn my-auto hover-pointer text-center" style="height:20px;min-width:73px" @attributes="@context.Attrs">
                @(EndTime?.ToString("yyyy-MM-dd") ?? T("EndTime"))
            </div>
        </ActivatorContent>
        <ChildContent>
            <SDatePicker Value=_EndTime Min=_StartTime ValueChanged=UpdateEndTimeAsync TValue="DateOnly?" OnInput="()=> EndTimeVisible = false"></SDatePicker>
        </ChildContent>
    </MMenu>
</div>

@code {
    [Parameter]
    public DateTimeOffset? StartTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> StartTimeChanged { get; set; }

    [Parameter]
    public DateTimeOffset? EndTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> EndTimeChanged { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public string IconClass { get; set; } = default!;

    private bool StartTimeVisible { get; set; }

    private bool EndTimeVisible { get; set; }

    private DateOnly? _StartTime { get; set; }

    private DateOnly? _EndTime { get; set; }

    protected override void OnParametersSet()
    {
        _StartTime = StartTime.HasValue ? DateOnly.FromDateTime(StartTime.Value.DateTime) : null;
        _EndTime = EndTime.HasValue ? DateOnly.FromDateTime(EndTime.Value.DateTime) : null;
    }

    private async Task UpdateStartTimeAsync(DateOnly? dateTime)
    {
        var startTime = dateTime?.ToDateTime(TimeOnly.MinValue);
        if (startTime > EndTime) await WarningAsync(T("Start time cannot be greater than end time"));
        else
        {
            StartTime = startTime;
            if (StartTimeChanged.HasDelegate) await StartTimeChanged.InvokeAsync(StartTime != null ? StartTime.Value.DateTime : null);
            if (OnChange.HasDelegate) await OnChange.InvokeAsync();
        }
    }

    private async Task UpdateEndTimeAsync(DateOnly? dateTime)
    {
        var endTime = dateTime?.ToDateTime(TimeOnly.MaxValue);
        if (endTime < StartTime) await WarningAsync(T("End time cannot be less than start time"));
        else
        {
            EndTime = endTime;
            if (StartTimeChanged.HasDelegate) await EndTimeChanged.InvokeAsync(EndTime != null ? EndTime.Value.DateTime : null);
            if (OnChange.HasDelegate) await OnChange.InvokeAsync();
        }
    }
}
